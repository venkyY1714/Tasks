Terraform Workspaces

Directory Structure
terraform/
├── terraform.tf
├── provider.tf
├── resource.tf
├── variables.tf
└── env_vars/
    ├── dev.tfvars
    ├── uat.tfvars
    ├── sit.tfvars
    ├── prod.tfvars
├── data.tf
├── backend.tf
├── backend/
│   ├── dev.tfbackend
│   ├── uat.tfbackend
│   ├── sit.tfbackend
│   ├── prod.tfbackend
├── outputs.tf
terraform.tf
	terraform {
  	 required_providers {
    	  aws = {
      	   source  = "hashicorp/aws"
      	   version = "5.97.0"
    	   }
  	  }
}
provider.tf
	provider "aws" {
  	region = "ap-south-1"
}

resource.tf
This config picks the AMI based on name and launches an instance.
	resource "aws_instance" "my_instance" {
 		ami               = data.aws_ami.selected.id
  		instance_type     = var.instance_type
 		availability_zone = var.availability_zone
		tags = {
    		Name = "${terraform.workspace}-instance"
  		}
}

variables.tf
Define input variables.
variable "ami_name" {}
variable "instance_type" {}
variable "availability_zone" {}

env_vars/ dev.tfvars, uat.tfvars, sit.tfvars, prod.tfvars
dev.tfvars
	ami_name         = "ubuntu"
instance_type    = "t2.micro"
availability_zone = "ap-south-1a"
uat.tfvars
	ami_name         = "amzn2-ami-hvm"
instance_type    = "t2.small"
availability_zone = "ap-south-1b"
sit.tfvars
	ami_name         = "RHEL-8"
instance_type    = "t3.micro"
availability_zone = "ap-south-1c"
prod.tfvars
	ami_name         = "debian-12-amd64"
instance_type    = "t2.large"
availability_zone = "ap-south-1c"

data.tf
	data "aws_ami" "selected" {
  		most_recent = true
  		owners      = ["amazon"]
  	filter {
    		name   = "name"
    		values = ["*${var.ami_name}*"]
  		}
  	filter {
    		name   = "virtualization-type"
  		values = ["hvm"]
  		}
}

backend.tf 
	terraform {
  	 backend "s3" {
    	  bucket = "tf-task-bkt"
    	  key    = "env/terraform.tfstate"
    	  region = "ap-south-1"
  	 }	
	}
Each file will define where to store the state for that environment.

backend/dev.tfbackend
	bucket         = "tf-task-bkt"
key            = "dev/terraform.tfstate"
region         = "ap-south-1"
encrypt        = true
backend/uat.tfbackend
	bucket         = "tf-task-bkt"
key            = "uat/terraform.tfstate"
region         = "ap-south-1"
encrypt        = true
backend/sit.tfbackend
	bucket         = "tf-task-bkt"
key            = "sit/terraform.tfstate"
region         = "ap-south-1"
encrypt        = true
backend/prod.tfbackend
	bucket         = "tf-task-bkt"
key            = "prod/terraform.tfstate"
region         = "ap-south-1"
encrypt        = true

output.tf
	output "instance_id" {
  	 description = "The ID of the EC2 instance"
  	 value       = aws_instance.example.id
}

output "public_ip" {
  	 description = "The public IP address of the EC2 instance"
  	 value       = aws_instance.example.public_ip
}

output "private_ip" {
  	 description = "The private IP address of the EC2 instance"
  	 value       = aws_instance.example.private_ip
}

Step-by-step commands to run DEV:
	cd terraform
terraform init -backend-config=backend/dev.tfbackend
terraform workspace new dev || terraform workspace select dev
terraform plan -var-file=env_vars/dev.tfvars
terraform apply -var-file=env_vars/dev.tfvars
terraform destroy -var-file=env_vars/dev.tfvars
Step-by-step commands to run UAT:
	cd terraform
terraform init -migrate-state -backend-config=backend/uat.tfbackend
terraform workspace new uat || terraform workspace select uat
terraform plan -var-file=env_vars/uat.tfvars
terraform apply -var-file=env_vars/uat.tfvars
terraform destroy -var-file=env_vars/uat.tfvars

Step-by-step commands to run SIT:
	cd terraform
terraform init -migrate-state -backend-config=backend/sit.tfbackend
terraform workspace new sit || terraform workspace select sit
terraform plan -var-file=env_vars/sit.tfvars
terraform apply -var-file=env_vars/sit.tfvars
terraform destroy -var-file=env_vars/sit.tfvars

Step-by-step commands to run PROD:
	cd terraform
terraform init -migrate-state -backend-config=backend/prod.tfbackend
terraform workspace new prod || terraform workspace select prod
terraform plan -var-file=env_vars/prod.tfvars
terraform apply -var-file=env_vars/prod.tfvars
terraform destroy -var-file=env_vars/prod.tfvars






